"use strict";import{SemVer as A}from"small-semver";export const MANIFEST_FILE_SUFFIX=".huzma.json",NULL_FIELD="",FIRST_SCHEMA_VERSION=1,LATEST_SCHEMA_VERSION=2,BYTES_NOT_INCLUDED=-1;function d(i){const r=typeof i;return r!=="object"?r:i===null?"null":Array.isArray(i)?"array":"object"}function P(i){if(i.length<1)return"";if(!i.startsWith("/")&&!i.startsWith("./")&&!i.startsWith("../"))return i;const r=i.split("/");let t=-1;for(let s=0;s<r.length;s++){const e=r[s];if(e!==""&&e!=="."&&e!==".."){t=s;break}}return t<0?"":r.slice(t).join("/")}export const NULL_MANIFEST_VERSION="0.0.0";export class HuzmaManifest{schema;name;version;files;entry;invalidation;description;authors;crateLogoUrl;keywords;license;repo;homepageUrl;permissions;metadata;constructor({schema:r=LATEST_SCHEMA_VERSION,name:t="unspecified-name",version:s=NULL_MANIFEST_VERSION,files:e=[],entry:c=NULL_FIELD,invalidation:l="default",description:p=NULL_FIELD,authors:u=[],crateLogoUrl:y=NULL_FIELD,keywords:h=[],license:b=NULL_FIELD,repo:x={type:NULL_FIELD,url:NULL_FIELD},homepageUrl:M=NULL_FIELD,permissions:k=[],metadata:n={}}={}){this.homepageUrl=M,this.repo={type:x?.type||"other",url:x?.url||NULL_FIELD},this.license=b,this.keywords=h,this.crateLogoUrl=P(y),this.authors=u.map(({name:f=NULL_FIELD,email:v=NULL_FIELD,url:R=NULL_FIELD})=>({name:f,email:v,url:R})),this.description=p,this.invalidation=l,this.files=e.map(f=>typeof f=="string"?{name:f,bytes:0,invalidation:"default"}:f).map(({name:f="",bytes:v=0,invalidation:R="default"})=>({name:P(f),bytes:v,invalidation:R})),this.entry=P(c),this.version=s,this.name=t,this.schema=r;const a=k.map(f=>typeof f=="string"?{key:f,value:[]}:f),o=new Map,g=a.reduce((f,v)=>(o.has(v.key)||(o.set(v.key,1),f.push(v)),f),[]);this.permissions=g,this.metadata=n}}const m=i=>typeof i=="string"&&i||NULL_FIELD,S=(i,r,t,s)=>{const e=typeof i[r];return e===t?!0:(s.push(`${r} should be a ${t}, got "${e}"`),!1)},V=i=>{switch(i){case"purge":case"url-diff":return i;default:return"default"}};export function validateManifest(i){const r={pkg:new HuzmaManifest,errors:[],semanticVersion:A.null()},{pkg:t,errors:s}=r,e=i,c=d(e);if(c!=="object")return s.push(`expected cargo to be type "object" got "${c}"`),r;if(typeof e.schema!="number"||e.schema<FIRST_SCHEMA_VERSION||e.schema>LATEST_SCHEMA_VERSION){const n=new Array(2).fill(0).map((a,o)=>o+1);s.push(`crate version is invalid, got "${e.schema}", valid=${n.join(", ")}`)}t.schema=e.schema||LATEST_SCHEMA_VERSION,S(e,"name","string",s),t.name=m(e.name);let l;S(e,"version","string",s)&&((l=A.fromString(e.version||""))?r.semanticVersion=l:s.push(`${e.version} is not a vaild semantic version`)),t.version=m(e.version);const p=Array.isArray(e.files);p||s.push(`files should be an array, got "${d(e.files)}"`);const u=new Map,y=p?e.files||[]:[];for(let n=0;n<y.length;n++){const a=y[n];typeof a=="string"&&(y[n]={name:a,bytes:0,invalidation:"default"});const o=y[n];if(d(o)!=="object"){s.push(`file ${n} is not an object. Expected an object with a "name" field, got ${d(o)}`);break}if(typeof o?.name!="string"||typeof(o?.invalidation||"")!="string"){s.push(`file ${n} is not a valid file format, file.name and file.invalidation must be a string`);break}const g=P(o.name);if(u.has(g))break;u.set(g,!0),t.files.push({name:g,bytes:Math.max(typeof o.bytes=="number"?o.bytes:BYTES_NOT_INCLUDED,BYTES_NOT_INCLUDED),invalidation:V(o?.invalidation||"default")})}const h=e.permissions||[];Array.isArray(h)||s.push(`permissions should be an array, got "${d(e.permissions)}"`);const b=new Map;for(let n=0;n<h.length;n++){const a=h[n],o=d(a);if(o!=="string"&&o!=="object"&&s.push(`permission should be a string or object with "key" & "value" properties. Permission ${n} type=${d(a)}`),typeof a=="string"){if(b.has(a))continue;b.set(a,1),t.permissions.push({key:a,value:[]});continue}if(o!=="object")continue;if(typeof a.key!="string"){s.push(`permission ${n} property "key" is not a string. got = ${d(a.key)}`);continue}const g=a.value||[];if(!Array.isArray(g)){s.push(`permission ${n} property "value" is not an array. got = ${d(a.key)}`);continue}b.has(a.key)||(b.set(a.key,1),t.permissions.push({key:a.key,value:g.filter(f=>typeof f=="string")}))}t.entry=m(e.entry),t.entry!==NULL_FIELD&&!u.has(t.entry)&&s.push(`entry must be one of package listed files, got ${t.entry}`),t.invalidation=typeof e.invalidation=="string"?V(e.invalidation):"default",t.description=m(e.description),t.authors=(e.authors||[]).filter(n=>typeof n?.name=="string").map(({name:n="",email:a,url:o})=>({name:n,email:m(a),url:m(o)})),t.crateLogoUrl=P(m(e.crateLogoUrl)),t.keywords=(e.keywords||[]).filter(n=>typeof n=="string"),t.license=m(e.license),t.repo.type=m(e.repo?.type),t.repo.url=m(e.repo?.url),t.homepageUrl=m(e.homepageUrl),e.metadata=e.metadata||{},d(e.metadata)!=="object"&&(s.push(`metadata should be a record of strings, got "${d(e.metadata)}"`),e.metadata={});const x={},M=e.metadata||{},k=Object.keys(e.metadata||{});for(let n=0;n<k.length;n++){const a=k[n],o=M[a];if(typeof o!="string"){s.push(`meta should be a record of strings, got type "${d(o)}" for property "${a}" of meta`);continue}x[a]=o}return t.metadata=x,r}export function manifestIsUpdatable(i,r){const t=validateManifest(r),s=validateManifest(i),e={oldManifest:t,newManifest:s,updateAvailable:!1},c=e.oldManifest.errors.length>0,l=e.oldManifest.errors.length>0;if(c||l)return e;const p=t.pkg.version===NULL_MANIFEST_VERSION,u=s.pkg.version===NULL_MANIFEST_VERSION;if(p&&u)return e;if(u)return e;if(p&&!u)return e.updateAvailable=!0,e;const y=t.semanticVersion,h=s.semanticVersion;return e.updateAvailable=h.isGreater(y),e}export class HuzmaUpdateDetails{add;delete;constructor(r,t){this.add=r,this.delete=t}}export function diffManifestFiles(i,r,t){const s=new HuzmaUpdateDetails([],[]),e={};for(let l=0;l<i.files.length;l++){const{name:p,invalidation:u}=i.files[l];if(i.entry!==NULL_FIELD&&p===i.entry&&u==="default"){e[p]="purge";continue}e[p]=u==="default"?t:u}const c={};for(let l=0;l<r.files.length;l++){const{name:p}=r.files[l];c[p]=!0}for(let l=0;l<i.files.length;l++){const{name:p,bytes:u}=i.files[l];(!c[p]||e[p]==="purge")&&s.add.push({name:p,bytes:u})}for(let l=0;l<r.files.length;l++){const{name:p,bytes:u}=r.files[l],y=e[p];(!y||y==="purge")&&s.delete.push({name:p,bytes:u})}return s}
//# sourceMappingURL=index.js.map
