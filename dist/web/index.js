"use strict";import{SemVer as A}from"small-semver";export const MANIFEST_FILE_SUFFIX=".huzma.json",NULL_FIELD="",FIRST_SCHEMA_VERSION=1,LATEST_SCHEMA_VERSION=2,BYTES_NOT_INCLUDED=-1;function d(i){const a=typeof i;return a!=="object"?a:i===null?"null":Array.isArray(i)?"array":"object"}function x(i){if(i.length<1)return"";if(!i.startsWith("/")&&!i.startsWith("./")&&!i.startsWith("../"))return i;const a=i.split("/");let t=-1;for(let s=0;s<a.length;s++){const e=a[s];if(e!==""&&e!=="."&&e!==".."){t=s;break}}return t<0?"":a.slice(t).join("/")}export const NULL_MANIFEST_VERSION="0.0.0";export class HuzmaManifest{schema;name;version;files;entry;invalidation;description;authors;crateLogoUrl;keywords;license;repo;homepageUrl;permissions;metadata;constructor({schema:a=LATEST_SCHEMA_VERSION,name:t="unspecified-name",version:s=NULL_MANIFEST_VERSION,files:e=[],entry:c=NULL_FIELD,invalidation:o="default",description:u=NULL_FIELD,authors:f=[],crateLogoUrl:m=NULL_FIELD,keywords:h=[],license:b=NULL_FIELD,repo:v={type:NULL_FIELD,url:NULL_FIELD},homepageUrl:P=NULL_FIELD,permissions:M=[],metadata:k={}}={}){this.homepageUrl=P,this.repo={type:v?.type||"other",url:v?.url||NULL_FIELD},this.license=b,this.keywords=h,this.crateLogoUrl=x(m),this.authors=f.map(({name:p=NULL_FIELD,email:g=NULL_FIELD,url:R=NULL_FIELD})=>({name:p,email:g,url:R})),this.description=u,this.invalidation=o,this.files=e.map(p=>typeof p=="string"?{name:p,bytes:0,invalidation:"default"}:p).map(({name:p="",bytes:g=0,invalidation:R="default"})=>({name:x(p),bytes:g,invalidation:R})),this.entry=x(c),this.version=s,this.name=t,this.schema=a;const n=M.map(p=>typeof p=="string"?{key:p,value:[]}:p),r=new Map,l=n.reduce((p,g)=>(r.has(g.key)||(r.set(g.key,1),p.push(g)),p),[]);this.permissions=l,this.metadata=k}}const y=i=>typeof i=="string"&&i||NULL_FIELD,S=(i,a,t,s)=>{const e=typeof i[a];return e===t?!0:(s.push(`${a} should be a ${t}, got "${e}"`),!1)},V=i=>{switch(i){case"purge":case"url-diff":return i;default:return"default"}};export function validateManifest(i){const a={pkg:new HuzmaManifest,errors:[],semanticVersion:A.null()},{pkg:t,errors:s}=a,e=i,c=d(e);if(c!=="object")return s.push(`expected cargo to be type "object" got "${c}"`),a;if(typeof e.schema!="number"||e.schema<FIRST_SCHEMA_VERSION||e.schema>LATEST_SCHEMA_VERSION){const n=new Array(2).fill(0).map((r,l)=>l+1);s.push(`crate version is invalid, got "${e.schema}", valid=${n.join(", ")}`)}t.schema=e.schema||LATEST_SCHEMA_VERSION,S(e,"name","string",s),t.name=y(e.name);let o;S(e,"version","string",s)&&((o=A.fromString(e.version||""))?a.semanticVersion=o:s.push(`${e.version} is not a vaild semantic version`)),t.version=y(e.version);const u=e.files===void 0?[]:e.files,f=Array.isArray(u);f||s.push(`files should be an array, got "${d(u)}"`);const m=new Map,h=f?u:[];for(let n=0;n<h.length;n++){const r=h[n];typeof r=="string"&&(h[n]={name:r,bytes:0,invalidation:"default"});const l=h[n];if(d(l)!=="object"){s.push(`file ${n} is not an object. Expected an object with a "name" field, got ${d(l)}`);break}if(typeof l?.name!="string"||typeof(l?.invalidation||"")!="string"){s.push(`file ${n} is not a valid file format, file.name and file.invalidation must be a string`);break}const p=x(l.name);if(m.has(p))break;m.set(p,!0),t.files.push({name:p,bytes:Math.max(typeof l.bytes=="number"?l.bytes:BYTES_NOT_INCLUDED,BYTES_NOT_INCLUDED),invalidation:V(l?.invalidation||"default")})}const b=e.permissions||[];Array.isArray(b)||s.push(`permissions should be an array, got "${d(e.permissions)}"`);const v=new Map;for(let n=0;n<b.length;n++){const r=b[n],l=d(r);if(l!=="string"&&l!=="object"&&s.push(`permission should be a string or object with "key" & "value" properties. Permission ${n} type=${d(r)}`),typeof r=="string"){if(v.has(r))continue;v.set(r,1),t.permissions.push({key:r,value:[]});continue}if(l!=="object")continue;if(typeof r.key!="string"){s.push(`permission ${n} property "key" is not a string. got = ${d(r.key)}`);continue}const p=r.value||[];if(!Array.isArray(p)){s.push(`permission ${n} property "value" is not an array. got = ${d(r.key)}`);continue}v.has(r.key)||(v.set(r.key,1),t.permissions.push({key:r.key,value:p.filter(g=>typeof g=="string")}))}t.entry=y(e.entry),t.entry!==NULL_FIELD&&!m.has(t.entry)&&s.push(`entry must be one of package listed files, got ${t.entry}`),t.invalidation=typeof e.invalidation=="string"?V(e.invalidation):"default",t.description=y(e.description),t.authors=(e.authors||[]).filter(n=>typeof n?.name=="string").map(({name:n="",email:r,url:l})=>({name:n,email:y(r),url:y(l)})),t.crateLogoUrl=x(y(e.crateLogoUrl)),t.keywords=(e.keywords||[]).filter(n=>typeof n=="string"),t.license=y(e.license),t.repo.type=y(e.repo?.type),t.repo.url=y(e.repo?.url),t.homepageUrl=y(e.homepageUrl),e.metadata=e.metadata||{},d(e.metadata)!=="object"&&(s.push(`metadata should be a record of strings, got "${d(e.metadata)}"`),e.metadata={});const P={},M=e.metadata||{},k=Object.keys(e.metadata||{});for(let n=0;n<k.length;n++){const r=k[n],l=M[r];if(typeof l!="string"){s.push(`meta should be a record of strings, got type "${d(l)}" for property "${r}" of meta`);continue}P[r]=l}return t.metadata=P,a}export function manifestIsUpdatable(i,a){const t=validateManifest(a),s=validateManifest(i),e={oldManifest:t,newManifest:s,updateAvailable:!1},c=e.oldManifest.errors.length>0,o=e.oldManifest.errors.length>0;if(c||o)return e;const u=t.pkg.version===NULL_MANIFEST_VERSION,f=s.pkg.version===NULL_MANIFEST_VERSION;if(u&&f)return e;if(f)return e;if(u&&!f)return e.updateAvailable=!0,e;const m=t.semanticVersion,h=s.semanticVersion;return e.updateAvailable=h.isGreater(m),e}export class HuzmaUpdateDetails{add;delete;constructor(a,t){this.add=a,this.delete=t}}export function diffManifestFiles(i,a,t){const s=new HuzmaUpdateDetails([],[]),e={};for(let o=0;o<i.files.length;o++){const{name:u,invalidation:f}=i.files[o];if(i.entry!==NULL_FIELD&&u===i.entry&&f==="default"){e[u]="purge";continue}e[u]=f==="default"?t:f}const c={};for(let o=0;o<a.files.length;o++){const{name:u}=a.files[o];c[u]=!0}for(let o=0;o<i.files.length;o++){const{name:u,bytes:f}=i.files[o];(!c[u]||e[u]==="purge")&&s.add.push({name:u,bytes:f})}for(let o=0;o<a.files.length;o++){const{name:u,bytes:f}=a.files[o],m=e[u];(!m||m==="purge")&&s.delete.push({name:u,bytes:f})}return s}
//# sourceMappingURL=index.js.map
